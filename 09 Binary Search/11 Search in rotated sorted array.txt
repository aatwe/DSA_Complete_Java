What given?

int[] nums	//ascending //equal values not found

What input : rotated nums
			what is rotated? 	left sub array(excluding pivot) => right sub array
							right subarray(including pivot) => left sub array
					-> new centre = last element


How rotation is working?
for ex
	pivot = index 3
       |
[4,5,6,7,0,1,2]		//How many times this was rotated? Answer : pivot index times + 1

[0,1,2,4,5,6,7]


iteration 1) 7,0,1,2,4,5,6
iteration 2) 6,7,0,1,2,4,5
itertaion 3) 5,6,7,0,1,2,4
iteration 4) 4,5,6,7,0,1,2



++++++++++++++++++++++++++++

	    |
//m > m+1
0 1 2 4 5 6 7	//unrotated
4 5 6 7 0 1 2	//rotated


//m < m+1
0 1 2 3 4 5 6 	//unrotated
4 5 6 0 1 2 3	//rotated

	nums[k], nums[k+1],....,nums[n-1], nums[0],nums[1]


Objective: find a int target in nums[]


My Method 1)
			How to find if element exists in rotated array? 	
				1) Unrotate array + use binary search to find, transform index to what rotated index would be
					1.a) How to unrotate array?
						a) first element of rotated nums = middle element of unrotated nums
						b) find middle element m of rotated nums[]
								if m > m+1
									how to unrotate?
									shift subarray 0 to m  to right
									shift subarray m+1 - end to left
								if m < m+1
									how to unrotate?
									shift subarray m to end to left
									shift subarray 0 to m-1 to right

					1.b) Use Binary search in unrotated array find index
					1.c) transform the index to rotated's index
					1.d) if exists -> return index
					 	if not exists -> return -1


Method 2) Without unrotating array , use Binary search in sepearate subarrays	
		1) find pivot of rotated nums[]
			what is pivot? for pivot p : p+1 <  p			//largest no. in array
				how to find pivot of rotated nums?
					binary search for mmiddle m and m+1 
						if m > m+1
							we are in right subarray -> this is the pivot, coz after next element new subarray starts

						IF M < m+1
							we are in left subarray -> pivot could be towards right of m

						if start >= m
							pivot to the left subarray	
								ignore right part -> end = mid - 1

						if start < m
							pivot to the right subarray 
								ignore left part -> start = mid + 1
						 		
		2) Pivot is found, find which side to  binary search based on what target
	
		2.a) If(start < target)	for ex [4,5,6,7,0,1,2]] and target = 
			Apply binary search in left subarray to pivot (binary search from start ---to pivot-1)
}
		
		2.b) If(target < start)
			Apply binary search to right subarray to pivot (binary search from pivot+1 to end)



public class RBS {

0) 	public static void main(String[] args) {
		int[] arr = {4,5,6,7,0,1,2};
		System.out.println(findPivot(arr));
}

1) 	public int search(int[] nums, int target) {
		int pivot = findPivot(nums);
		if(pivot == -1) {
			return binarySearch(nums,target, 0, nums.length-1);	
	}
		if(nums[pivot] == target) {
			return pivot;
	}
		if(target >= nums[0]) {
			return binarySearch(nums,target, 0, pivot - 1);
	}
		return binarySearch(nums, target, pivot+1, nums.length - 1);
    }

2)    static int findPivot(int[] arr) {
  	   int start = 0;
	        int end = arr.length - 1;
	        while(start <= end) {
		            int mid = start + (end - start) /2;
		            if(mid < end && arr[mid] > arr[mid+1]) {		//add check for case when                                                                                            mid is last                                                                                                          element while binary searching
			            return mid;
	        }	
		            if(mid > start && arr[mid] < arr[mid-1]) {
			         return mid - 1;
	        }
		            if(arr[mid] <= arr[start]) {
			         end = mid - 1;
	        } 	    else{
			         start = mid + 1;
		    }
	    }
	        return -1;
  }


3) static int binarySearch(int[] arr, int target, int start, int end) {
		while(start <= end) {
			int mid = start + (end - start)/2;

			 if(target < arr[mid]) {
				end = mid -1;
			} else if (target > arr[mid]) {
				start = mid + 1;
			} else {
				return mid;
    		}	
	    }
		return -1;
	}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Q1) Can we minimize these 3 separate methods? Yes Recursion


Q2) What if we want it to work for duplicate values


What if we have array like 
0 1 2 4 5 6 7	//unrotated
4 5 7 7 0 1 2	//rotated

in findPivot: below will fail. Why? 
     if(arr[mid] <= arr[start]) {
			         end = mid - 1;
	        } 	    else{
			         start = mid + 1;
		    }
	    }



SolutioN: Skip starting and ending no.
		start = start + 1
		end = end - 1

//bascially: if elements at mid,start,end are equal, then can skip duplicates

What if elements at start and end were pivots? -> check if they are pivot first
	when will start be pivot? arr[start] > arr[start+1]

Code becomes:
static int findPivotWithDuplicates (int[] arr) {
  	   int start = 0;
	        int end = arr.length - 1;
	        while(start <= end) {
		            int mid = start + (end - start) /2;
		            if(mid < end && arr[mid] > arr[mid+1]) {		//add check for case when                                                                                            mid is last                                                                                                          element while binary searching
			            return mid;
	        }	
		            if(mid > start && arr[mid] < arr[mid-1]) {
			         return mid - 1;
	        }
				 if(arr[mid] == arr[start] && arr[mid] == arr[end]) {
				   if(arr[start] > arr[start+1]) {	
				   		return start;
				   }	
				   start++;

				  if(arr[end] < arr[end - 1]) {	
				   		return end-1;
				   }	
				   //check whether end is pivot	
				   end --;		
			}		
		  		 else if(arr[start] < arr[mid] || arr[start] == arr[mid] && arr[mid] > arr[end])) {
					start = mid + 1;
			} else {
					end = mid - 1;
			}		
		
	    }
	        return -1;
  }


}