1)What is given?sorted array that is rotated
		
2) How is rotation done? 
	what is rotated? 	left sub array(excluding pivot) => right sub array
							right subarray(including pivot) => left sub array





for ex
	pivot = index 3
       |
[4,5,6,7,0,1,2]		//How many times this was rotated? Answer : pivot index times + 1

[0,1,2,4,5,6,7]


iteration 1) 7,0,1,2,4,5,6
iteration 2) 6,7,0,1,2,4,5
itertaion 3) 5,6,7,0,1,2,4
iteration 4) 4,5,6,7,0,1,2





public class RotationCOunt {
	public static void main (String[] args) {
		int[] arr = {4,5,6,7,0,1,2};
		System.out.println(countRotations(arr));
}

  	private static boolean countRotations(int[] arr) {
			
}
	
}


-1)
	private static int countRotations(int[] arr) {
	/*	int pivot = findPivot(arr);
		if(pivot == -1) {
			return 0;
}	*/		//-1 +1 will return - hence hide

		return pivot + 1;

}



0) 
  static int findPivot(int[] arr) {
  	   int start = 0;
	        int end = arr.length - 1;
	        while(start <= end) {
		            int mid = start + (end - start) /2;
		            if(mid < end && arr[mid] > arr[mid+1]) {		//add check for case when                                                                                            mid is last                                                                                                          element while binary searching
			            return mid;
	        }	
		            if(mid > start && arr[mid] < arr[mid-1]) {
			         return mid - 1;
	        }
		            if(arr[mid] <= arr[start]) {
			         end = mid - 1;
	        } 	    else{
			         start = mid + 1;
		    }
	    }
	        return -1;
  }

1) static int findPivotWithDuplicates (int[] arr) {
  	   int start = 0;
	        int end = arr.length - 1;
	        while(start <= end) {
		            int mid = start + (end - start) /2;
		            if(mid < end && arr[mid] > arr[mid+1]) {		//add check for case when                                                                                            mid is last                                                                                                          element while binary searching
			            return mid;
	        }	
		            if(mid > start && arr[mid] < arr[mid-1]) {
			         return mid - 1;
	        }
				 if(arr[mid] == arr[start] && arr[mid] == arr[end]) {
				   if(arr[start] > arr[start+1]) {	
				   		return start;
				   }	
				   start++;

				  if(arr[end] < arr[end - 1]) {	
				   		return end-1;
				   }	
				   //check whether end is pivot	
				   end --;		
			}		
		  		 else if(arr[start] < arr[mid] || arr[start] == arr[mid] && arr[mid] > arr[end])) {
					start = mid + 1;
			} else {
					end = mid - 1;
			}		
		
	    }
	        return -1;
  }


}
