12345 --> 54321


How to reverse a number using recursion?

1) What is recursive relation
	f(1824) -> 4281
//reverse no.	//reversed no.
	

	f(182) + '4'
	f(18)  + '2'
	f(1)	  + '8'



2) what is recursion tree

	f(1824)
	  |			
	f(182)//how? 1824/10   	+ '4' 	//how? 1824%10
	  |
	f(18)  + '2'
	  |
	f(1)	  + '8'


Q) Why do we return values in recursive function?
	values formed inside function are in function scope.	
		How to access this value? return it 

	//in below case: where is no.? outside function  -> no need to return
	


Q) How to add the no.?
 
a) (Unpure recursion) why unpure? using sum var outside function			//Argument outside function
	multiply with base 10 and add in sequence

	new sum = prev sum * 10 + rem 


3) what is base case?
	if single digit found -> reverse that no.


Code(Unpure Recursion):


public class Reverse {

	public static void main(String[] args) {
		rev1(1234);
		System.out.println(sum);

	}
	
	static int sum = 0;					//note : sum variables stores reversed no.s --> it is updated outside the rev1() function
	static void rev1(int n) {
		if(n == 0) {
			return;
		}						//How to make 4321? XXX4 -> XX43 -> X432 -> 4321
		int rem = n%10;				0*10 + 4 -->  4*10 + 3 ---> 43*10  + 2 ---> 432*10 + 1 --> 4321
		sum = sum*10 + rem;			
		rev1(n/10);
	}	

}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Code(Pure Recursion)

Uses helper function() concept:
	Why helper function? if need additional variables in argument

..how to make 4321? 4XXX -> 43XX -> 432X -> 4321
4*1000 + rev2(123) = 4x10^3 + rev2(123) ==> 4x10^3 + 3x10^2 + rev2(12) ==>  4x10^3 + 3x10^2 + 2x10 + rev2(1)
How to make above? Pass argument inside helper function		//earlier our argument was outside recursive function

F(N, arg) = rem*10^(arg-1) + F(N/10,arg-1)


Pseudo code:
1) find total on. of digits
2) helper(n


public class Reverse {

	public static void main(String[] args) {
		rev1(1234);
		System.out.println(rev2(1234));

	}
	
	static int base = 0;					//note : sum variables stores reversed no.s --> it is updated outside the rev1() function
	static int rev2(int n) {
		int digits = (int)(Math.log10(n) + 1;
		return helper(n,digits);
		
	}	
	
	private static int helper(int n, int digits) {
		if(n%19 == n) {
			return n;
		}
		int rem = n%10;
		return rem *(int)(Math.pow(10, digits-1)) + helper(n/10, digits-1);
	
	}



	private static void main(String[] args) {
		rev1(1234);
		System.out.println(sum);
		
	}						

}

>4321
