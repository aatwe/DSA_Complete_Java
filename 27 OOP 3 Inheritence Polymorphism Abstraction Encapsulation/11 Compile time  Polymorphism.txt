1) Compile time/ static polymorphism

How to achieve compile time poly?
	Method overloading			//can be acheived by operator overloading but Java does not support

What is method overloading?

	a) class has multiple methods
	b) methods have same name
	c) order/parameters/return type can be different	//something must be different


Ex of compile time poly? Multiple constructors

Why compile time / static called?
	which constructor/method to call -> decision is taken by java at compile time	
Ex

How to check if at compile time it is doing?

public class Numbers {
	
	void sum(int a, String b) {
		return a+b;
	}

	void sum(String b, int a){
		return a+b+c;
	}

	public static void main(String[] args) {
		Numbers num = new Numbers();
		obj.sum(2,3);
		obj.sum(1,3,7);
		obj.sum(4,5,6,8);

	}

}	 

Q) When memory allocation happens? runtime
Q) When checking happens? Compile time


Q) What if we pass integer while constructor/ method has double as parameter 

//Works
public class Numbers {
	
	double sum(double a, int b) {		//taking double
		return a+b;
	}

	void sum(String b, int a){
		return a+b+c;
	}

	public static void main(String[] args) {
		Numbers num = new Numbers();
		obj.sum(2,3);				//passing int
		obj.sum(1,3,7);
		obj.sum(4,5,6,8);
	}
}	
Why still works?  java auto converts int to double

Q) What if we pass


//Error
public class Numbers {
	
	double sum(double a, int b) {		//taking double
		return a+b;
	}

	void sum(String b, int a){
		return a+b+c;
	}

	public static void main(String[] args) {
		Numbers num = new Numbers();
		obj.sum(2,3.45678);				//passing int
		obj.sum(1,3,7);
		obj.sum(4,5,6,8);
	}
}

Why error? automatic casting rules


Q) What if

public class Numbers {
	return a + b;
}

double sum(double a, int b) {		
	return a + b;
}

double sum(int a, int b) {	//will use this since available
	return a + b;
}

int sum(int a, int b, int c){
	return a + b + c;
}

public static void main(String[] args){
	Numbers obj = new Numbers();	
	
	obj.sum(2,3);
	obj.sum(1,3,7);
	
	
}