Newton Raphsen's method


1) root = X + N/X

	What is X? any assumed guess square root 
	What is root? actual square root


	Q)Why create such equation? so we can guess closest answer 


	What is error? root - X
		for ex actual root = 36.4, guess = 36.1
		error  = 0.3

	Change value of x, till error is minimum
		How to minimize error?
			
		

	1) Assign X to N
	
	2) When error < 1			//why?	//allowed error	 
			answer found

	3) if error !<1
			update root
				root = root = X + N/X 




Code: 
public class NewtonSQRT {asda dsa

	public static void main(String[] args) {
		System.out.println(sqrt(40));

}
	static void double sqrt(double n) {
		double x = n;	
		double root;
		while(true) {
			double root = 0.5*(x + (n/x));
			
			if(Math.abs(root - x) < 1) {	//Allowed error		//can also be Math.abs(root - x) < 0.5	>Output:6.325023209103
				break;
		}			

		x = root;

		}
	return root;
	}

}

>Output:
6.40195561907565

=========================================================
Q) What complexity?

	How to calculate? fast fourier transform (FFT)
	O(log(n)F(N))

		//F(N) = cost of calculating complexity of f'(x)
		//n = ndigit precision	
