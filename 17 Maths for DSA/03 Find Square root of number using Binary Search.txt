Given:Find Sqrt of 36


0		18		36
----------- -----------

A) How to find integer value?

1) find middle element
	

2) check if middle * middle > n
	
	2.1) e = mid - 1

3) else check if (mid * mid < n)
		s = mid + 1


for ex sqrt of 40

1) 20 (0,40)

2) 20*20 > 40 	(0,20)
	10		
	  10*10 >40	(0,10)
		5
		  5*5 <40	 	(5,10)

//Same approach for  decimal value
6 found
check for 
	6.1,6.2,6.3,6.4
			go back to 6.3
				checkf or 6.31,6.32,6.33
					go back to 6.32	//Ans found

Code:		  

public class BinarySearchSQRT {
	public static void main(String[] args) {
		int n =40; //no. to find root
		int p = 3;	//upto 2 decimal places

		System.out.println(sqrt(n,p));
		//how to pretty print?
		System.out.printf("%.3f", sqrt(n,p));

	}
	
	static double sqrt(int n, int p) {	//Simple Binary Search
		int s=  0;	
		int e=  n;

		double root = 0.0;			//Assume
		//find integer value
		while(s< e) {
		int m = s+ (e- s)/2

		//root found	
		if(m*m == n) {	
			root = m;		//root found
			return root;
		
		}
	
		//root on left side
		if(m*m > n) {
			e = m - 1;
		
		} else {
			s = m + 1;
		}
		
	}
	double incr = 0.1;
	for(int i = 0; i<p; i++) {
		if(root*root <= n)	
		  root += incr;			
		}


		root -= incr;
		incr /= 10;
			
	}

	return root;

	}

}


>Output:
6.3239999999999945
6.324	//Pretty print

//What tC: O(Log(n) 	//binar search