1) N Queens problem


What problem
	Queen : atack directions u,d,r,l,D1,D2,D3,D4

	if given nxn board

	How ways to place 4 queens on it? no 2 queen should kill other

For ex
no queen killing any other
	
	 3    2    1 	0
 
3	   |     |  a |    |
	   |     |    |    |
	---------------------
2	 b |     |    |    |
	   |     |    |    |
	-----------------------
1	   |     |    |    |
	   |     |    |  c |
	----------------------   
0	   |     |	   |    |
 	   |  d  |    |    |
	----------------------  

Pseudo code:
1) What condition for queens 
		2 queens cant be in single row / single col
		

2) what recursive problem?
	a) put a
	b) put b with conditions of a

3) Why backtracking problem
	a) for ex add a
	b) add b (conditions not in same row or col)
	c) cant add c in row 1 anywhere
		no need to check row 0
			backtrack this is wrong possibility
				mark b and a as unvisited

	 3    2    1 	0
 
3	 a |     |    |    |
	   |     |    |    |
	---------------------
2	   |     |  b |    |
	   |     |    |    |
	-----------------------
1	   |     |    |    |
	   |     |    |    |
	----------------------   
0	   |     |	   |    |
 	   |     |    |    |
	----------------------  

Ex 2
cant place anywhere in row 0 
	backtrack 1 level


	 3    2    1 	0
 
3	 a |     |    |    |
	   |     |    |    |
	---------------------
2	   |     |    | b  |
	   |     |    |    |
	-----------------------
1	   |  c  |    |    |
	   |     |    |    |
	----------------------   
0	   |     |	   |    |
 	   |     |    |    |
	----------------------  

	 3    2    1 	0
 
3	 a |     |    |    |
	   |     |    |    |
	---------------------
2	   |     |    | b  |
	   |     |    |    |
	-----------------------
1	   |     |    |    |
	   |     |    |    |
	----------------------   
0	   |     |	   |    |
 	   |     |    |    |
	---------------------- 

	 3    2    1 	0
 
3	 a |     |    |    |
	   |     |    |    |
	---------------------
2	   |     |    |    |
	   |     |    |    |
	-----------------------
1	   |     |    |    |
	   |     |    |    |
	----------------------   
0	   |     |	   |    |
 	   |     |    |    |
	----------------------  
 
	 3    2    1 	0
 
3	   |  b  |    |    |
	   |     |    |    |
	---------------------
2	   |     |    |    |
	   |     |    |    |
	-----------------------
1	   |     |    |    |
	   |     |    |    |
	----------------------    
0	   |     |	   |    |
 	   |     |    |    |
	----------------------  
 
Q) What recursion tree?

	(board,r,c)
	(0,0) (0,1) (0,2) (0,3) 

    /  |  |   \
(1,0)(1,1)(1,2) (1,3)



Q) What order of recursion call?
1) (0,0) -> all respective recursion calls
2) (0,1) ...

1 Possible answer found

	 3    2    1 	0
 
3	   |     |  a |    |
	   |     |    |    |
	---------------------
2	 b |     |    |    |
	   |     |    |    |
	-----------------------
1	   |     |    |    |
	   |     |    |  c |
	----------------------   
0	   |     |    |    |
 	   |  d  |    |    |
	----------------------  

For any queen at position  (r,c)

Q) How to traverse diagonal? r-- , c++
	condition for diagonal? total length - (col - 1)

		how many diagonal moves avail? min(row,col)  ex queen 1 at (2,3) and queen2 at (3,2)



Pseudo Code:

a0 main
	int n = 4;

	boolean[][] board = new boolean[n][n];
	
	queens(board,0);


b) queens	//what to return? no. of ways to print 4 queens
		
	How to mark queen?
		//what argument? boolean board[][] -> if true -> means queen is placed
		
	what else to pass in argument? row
	Why col no need? col starts from 0 every time	 
	when recursion call exits? when all queens placed
				When row = board.length

	How to display board when all queens placed? create a display(board) function
		How to display 2D
		for every boolean element in row
			if element is true -> print Q
			else -> print x

	How to place queens? and check all rows and col?
		loop col = 0 to board.length
	When to place queen? if is safe
		How to check if safe? isSafe()	//what arg?board,row,col
			What if it is safe to place? place //mark true + get ans from below recursion call in count + change back to normal
				how to place? board[row][col] = true
				how to get ans from recursion call? count += queens(board, row+1);
				board[row][col] = false;
				

	How to get count? take count var in recursion call arg and add to count whatever recursion call returns

	for(int col = 0; col < board.length; col++) {
		
	}
	
	How to chekc if isSafe()?
		a) check vertical row
			i = 0 to rpw
			if board[i][col] is true -> queen present -> not safe to place

		b) check diagonal left
			how many times can we go left? int maxLeft = Math.min(row, col);
			move maxLeft times (Subtract row and col)	 

		c) check diagonal right	//row decreases, count increases
			how many times can we move right?board.length - col - 1
	
		d) else if all above checks are fine (not returning false )
			return ture

	

	Return count
		

	
COde:




import java.util.Arrays;
import java.util.ArrayList;
class main {

    public static void main(String[] args) {
        int n = 4;
        boolean[][] board = new boolean[n][n];
        queens(board, 0);
        System.out.println(queens(board, 0));
    }

    static int queens(boolean[][] board, int row) {
        if (row == board.length) {
            display(board);
            System.out.println();
            return 1;
        }
        int count = 0;

        for (int col = 0; col < board.length; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = true;
                count += queens(board, row + 1);
                board[row][col] = false;
            }
        }
        return count;
    }

    private static boolean isSafe(boolean[][] board, int row, int col) {
        // check vertical row
        for (int i = 0; i < row; i++) {
            if (board[i][col]) {
                return false;
            }
        }

        // diagonal left
        int maxLeft = Math.min(row, col);
        for (int i = 1; i <= maxLeft; i++) {
            if(board[row-i][col-i]) {
                return false;
            }
        }

        // diagonal right
        int maxRight = Math.min(row, board.length - col - 1);
        for (int i = 1; i <= maxRight; i++) {
            if(board[row-i][col+i]) {
                return false;
            }
        }

        return true;
    }

    private static void display(boolean[][] board) {
        for (boolean[] row : board) {
            for (boolean element : row) {
                if (element) {
                    System.out.print("Q ");
                } else {
                    System.out.print("X ");
                }
            }
            System.out.println();
        }
    }
}

>Output: 2 ways to put queen


X Q X X 
X X X Q 
Q X X X 
X X Q X 

X X Q X 
Q X X X 
X X X Q 
X Q X X 



2

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Debug
   0,0 -> isSafe() -> yes -> try next row
      1,0 -> isSafe() -> No
   	 1,1 -> isSafe() > No
   	 1,2 -> isSafe() -> yes ->  try next row

		      2,0
 	 1,3
 		 	 2,0
			 2,1

					  	3,0
						3,1
   						3,2
   						3,3 
			//none worked,backtrack
	            2.2
			 2.3
	1,4
  0,1
	1,0...
		
	

Q) What space and time complexity?


	space : nxn

	time  : 
		What is recurrence relation: start at first row
			
			isSafe() : O(n)
			Queen()
					placing queen : after placing , n-1 rows
								n*T(N-1)
					+
					check every single item: O(N^2)
	
			T(N)= N*T(N-1) + O(N^2)


		How to solve recurrence relation? Akkra Baazi

	
			O(N^3 + N!) = O(N!) = TC  



Why N!?
	a) for a 4x4 , first row -> 4 places to put queen
			    second row -> 3 options
						...	 
						= n!