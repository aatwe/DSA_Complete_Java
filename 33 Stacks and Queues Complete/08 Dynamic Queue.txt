0) PseudoCode:		//What feature of dynamic queue? does not get filled


a) Create 2 constructors
b) override insert()		//use push method from Dynamic Stack
	returns insert(item) from super class //Circular queue

c) if full -> double size
		What change? if full -> temp[i] = data[front + i]%data.length
	

Ex oftemp[i] = data[front + i] % data.length;

	  0 1  2  3  4
given: 6  5 19 1 133

	 f		    e
	 5 19 1 133 6  _ _ _ _ _

		//data [2 + 0] % 5
	 

What TC? O(n)	//copying all previous elements


1) Copy code from dynamic stack


public class DynamicQueue extends Circular Queue {
	public DynamicStack() {
		super(); 
	}

	public DynamicStack(int size) {
		super(size); 
	}


	@Override
	public boolean insert(int item) {
		if(this.isFull()) {
		int[] temp = new int[data.length * 2];			//note temp will be rmeoved lataer since inside function	//previous data also removed by garbage collector
		for(int i=0; i< data.length; i++) {
			temp[i] = data[front + i] % data.length];
		}
		front  = 0;
		end = data.length;	
		data = temp;
	}		  
		return super.insert(item);
	}

}



2)
public class DynamicStack extends CustomStack {

public DynamicStack() {
	super();
}
public DynamicStack(int size) {
	super(size);
}

@Override
public boolean push(int item) {
	if(this.isFull()) {
		int[] temp = new int[data.length * 2];			//note temp will be rmeoved lataer since inside function	//previous data also removed by garbage collector
		for(int i=0; i< data.length; i++) {
			temp[i] = data[i];
		}

		data = temp;
	}
	//insert item
	return super.push(item);

	

  }

}





Code 2: 

public class CustomStack {
    protected int[] data;
    private static final int DEFAULT_SIZE = 10;

    int ptr = -1;

    public CustomStack() {
        this(DEFAULT_SIZE);
    }


    public CustomStack(int size) {
        this.data = new int[size];
    }

    public boolean push(int item) {
        if(isFull()) {
            System.out.println("Stack is full");
            return false;
        }
        ptr++;
        data[ptr] = item;
        return true;
    }

    private boolean isFull(){
        return ptr == data.length -1;
    }

    private boolean isEmpty(){
        return ptr == -1;
    }
    public int pop() throws StackException {
        if(isEmpty()) {
            throw new StackException("Cannot pop from Empty stack");
        }

        int removed = data[ptr];
        ptr --;
        return removed;
        //return data[ptr--];

    }
    public int peek() throws StackException {
        if(isEmpty()) {
            throw new StackException("Cannot peek from Empty stack");
        }
        return data[ptr];
    }

}
Code 2:

import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Deque;
import java.util.Stack;
public class Main {
    public static void main(String[] args) throws StackException {		//dont forget throws StackException in main also

        DynamicQueue stack = new DynamicQueue (5);

        stack.push(34);
        stack.push(45);
        stack.push(2);
        stack.push(9);
        stack.push(18);
	   stack.push(18);
	   stack.push(18);		//dynamic stack will allow to insert

	
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
        System.out.println(stack.pop());
    }
}


Code 3: //use it in throws

public class StackException extends Exception {
    public StackException(String message) {
        super(message);
    }

}