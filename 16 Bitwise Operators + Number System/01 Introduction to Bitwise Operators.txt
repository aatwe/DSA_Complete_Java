*Important


Note: Ignore left hand side (leading 0s) 0s for all no. systems
	0011001  //ignore 00


1)
Q) How is code stored? 0s and 1s, we cant write, so take help of programming languages
 

Q) How is below stored
	int a = 10;


Q) How humans store no.? decimal

	Decimal = Base 10: Create any no. using 0,1,2,3,4,5,6,7,8,9
		why decimal? 10 fingers


Q) What no. system computer use to store no.? binary: base 2
				Create any no. using 0,1



What types of operators?

1) Relational operators
	<,>,<=,>=,==,!=,===,!== 

2) Bitwise operators
	AND(&) , OR(|), XOR(^),  Compliment(~), Left Shift(<<) , Right Shift(>>)

3)Arithmetic operators
	+-/*

4) Conditional operator
	&&, ||, ?:

5) Special Operators
	++,--,+=,-=,*=,/=,%=,&=,|=,^=,<<=,>>=

7) Logical Operators
	AND(&),OR(|),NOT(!)


8) Assignment Operators
	=,+=,*=,-=,/=, %=


Q) difference bw &&(Conditional) and &(Logical/Bitwise)?  Conditional checks if first argument good enough, no need for second argument
										    Logical/Bitwise evaluates both sides before computing final  value
ex: y.bar() called only if x.foo is true

x.foo() && y.bar()


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
BITWISE OPERATORS:
1) AND : Both left and right operand should be true

a   b   a&b
0   0   0
0   1   0
1   0   0
1   1   1


Use case of AND?
	find if no. N is even or odd


	m1)  n%2 = 0
	

	m2) 
		

2) OR :

a   b   aORb
0   0   0
0   1   1
1   0   1
1   1   1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3) XOR //exclusive or  //only 1 should be true //exclusively OR  //not and
if and only if

a   b   aâŠ•b
0   0    0
0   1    1
1   0    1
1   1    0


Note: What XOR really means? usecase
Can XOR result with one of the original no. to get other original no.  		//Cryotography/ hashing algo
a ^ b = X
X ^ a = b
X ^ b = a


Use case observations:

-> a XOR 1 = a'
-> 1 XOR 1 = 0


-> 1 XOR 0 = 1
-> a XOR 0 = a

-> a XOR a = 0
  12 XOR 12 = 0

-> 	a XOR a = 0
	a XOR 0 = a

ALSO bitwise operators are  Associative:

a XOR b XOR c = a XOR c XOR b

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
2) Left Shfit Operator (<<) //Doubles the no., how to double? increase 1 entire base

--------------------
	a<<b = a*2^b
--------------------


	//shifts binary no. all digits left, add extra 0	  ---> Doubles the no.
	(10)10 = (1010)2



a) 10 << 1
	1010 << 1 = 10100

b)   10100
	  2^0*0 + 2^1*0 + 2^2*1 + 2^3*0 + 2^4*1 = 20	 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3) Right Shift Operator (>>) //Divides the no., how to divide? reduce 1 entire base

00
------------------
    a>>b = a / (2^b)
------------------

	

	//shifts binary no. all digits left, add extra 0	  ---> Doubles the no.
	(10)10 = (1010)2


a) 10 >> 1  = 10 / (2^1) = 5

	1010 >> 1 = 0101 = 101

b)    101					 (left to right) 
	  2^0*1 + 2^1*0 + 2^2*1 = 5 (left to right)




