Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.b 


GOOGLE:


1) What given? str = [2,3,4,5,,6,7,8,9]
	
2) what letter combinations?


3) Test case
Input = "23"
we know:
2: abc
3: def


Output =  ad,ae,af,bd,be,bf,cd,ce,cf = possible combinations


What solutioN? up/p subset method



Q1) How to find subesets?


ad = take a, removeb,removec,remove d,remove e, take f

Q2) What p/up method we used?
	p contains original answer,
	up : when up becomes empty -> answer found -> check every first character ->  find what possible answers for that char -> put them in recursion calls


Q3) for ex
				p/up
				1/2
		/		|		\			//3 recursion calls
	  a/2		     b/2	      c/2
    /   |   \ 	   /  |  \	    /  |  \ 
 ad/'' ae/'' af/'' ...					//up became empty -> answer found
	
//Total 9 Answers
//figure how to return them by putting in a list
	1) pass arrayList ina argument
		//base condition empty -> add answer
	2) 

Q) How to convert 2 -> abc

we know a + 1  = b	//Unicode value


We can create our own map

 1		2		3
abc	     def	     ghi
012       345        678
	
 4		5		6
jkl	     mno	     pqr
9...
 7		8		9
stu	    vwx	     yz
	


nth digit :  	
starting from : (digit - 1)*3
ending 	   : (digit*2) + (digit - 1) = 3*digit


loop how many times? 3  
Ending condition:
except when index = 26 (26 letters) (0-25)


Q) for ex																												/\
				p/up																								|	|					
				1/2											//for loop from [0  to 3)  //covers 0,1,2  (a,b,c)				|	|
		/		|		\			//3 recursion calls																|	|
	  a/2	//0	     b/2 //1	      c/2 //2							//for a/2 loop runs from [3 to 6) //covers 3,4,5 (d,e,f)			|	|//while returning above has internal local list -> where list.addAll() -> adds all answers with every recursion for ex a/2 will have 3 answers	
    /   |   \ 	   /  |  \	    /  |  \ 																					|	|
 ad/'' ae/'' af/'' ...					//up became empty -> answer found													|	|
																											     V

Q) how to get 'd' and other chars? char a + index
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Pseudo Code:

a) main
	recursive call pad("", "12")		//12 are char

b) pad
	b.1) base case: if up is empty -> print p -> return
			
	b.2) how to get firs digit? up.charAt(0);  		//note have to convert into integer from character
						int digit = up.charAt(0) - '0'

	b.3) run for loop from (digit-1)*3 to digit*3
		
			which character to add?
					for index 3 -> 'a' + 3 = d
						char ch = (char)('a' + i);
			add in recursion call  (p+ch)
						pad(p+ch, up.substring(1))
	b.4) 


Code:
class main {
    public static void main(String[] args) {
        pad("", "12");
    }
    static void pad(String p, String up) {
        if(up.isEmpty()) {
            System.out.println(p);
            return;
        }

        int digit = up.charAt(0) - '0';

        for(int i = (digit-1)*3; i< digit*3; i++ ) {
            char ch = (char) ('a' + i);
            pad(p + ch, up.substring(1));

        }
    }
    
}


How to return in Arraylist		//Get answer list form		//same as subseqRet approach
Code:



import java.util.ArrayList;
import java.util.ArrayList;

class main {

    public static void main(String[] args) {
        System.out.println(padRet("", "12"));
    }
    static ArrayList<String> padRet(String p, String up) {
        if(up.isEmpty()) {
            ArrayList<String> list = new ArrayList<>();
            list.add(p);
            return list;
        }

        int digit = up.charAt(0) - '0';

        ArrayList<String> list = new ArrayList<>();

        for(int i = (digit-1)*3; i< digit*3; i++ ) {
            char ch = (char) ('a' + i);
            list.addAll(padRet(p + ch, up.substring(1)));

        }
        return list;
    }

}


What we did? Solved questions with patterns




Q) How to return count?



import java.util.ArrayList;
    class main {
        public static void main(String[] args) {
            System.out.println(padCount("", "12"));
        }

        static int padCount(String p, String up) {
            if(up.isEmpty()) {
                return 1;
            }
            int count = 0;
            int digit = up.charAt(0) - '0';
            for(int i = (digit-1)*3; i< digit*3; i++ ) {
                char ch = (char) ('a' + i);
                count = count + padCount(p + ch, up.substring(1));
            }
            return count;
        }

    }
