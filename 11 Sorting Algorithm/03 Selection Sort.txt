What is selection sort?
	Select an element -> put it at its correct sorted position


How to select an element and put correct place? (start with largest)
	1) find largest in array -> put at correct index (swap)
	2) find 2nd largest -> put at second last (swap)
	3) find 3rd largest -> put at third last (swap)
	4) find 4th largest -> put at fourth last (swap)
	5) find 5th largest -> put at fifth  last (swap)
	

Ex 4 5 1 2 3
1) select 5 -> put at last(swap)	// 4 3 1 2 5
2) select 4 -> put at 2ndlast    // 2 3 1 4 5
3) select 3 -> put at 3rdlast    // 2 1 3 4 5
4) select 2 -> put at 4th last   // 1 2 3 4 5

  

Q)How many comparisons we made for n elements?
1) find largest -> n -1 comparisons		   5 4 3 2 1
2) find second largest n-2 comparisons
3) 				 n-3 comparisons
				 ..0 comparisons		// 1 2 3 4 5

total = 0 , 1, 2,3 .....n-1

	0 + 1 + 2 + 3....n-1
	
	n ( n-1) /2 
	
	O(n^2)


Q) What is worst case complexity? O(n^2)

Q) What is best case complexity? Array already sorted , still looks for max items to check : O(n^2)

Q) Is it stable sorting algo? NO , does not retail starting order


Q) What is use case? Use selection sort when small lists / arrays


pseudo code:

a) main

b) selection

  //i=0
	b.1) find largest element in array width (0-n) ->   swap with element at last position n
  //i=1
	b.2) find largest element in array width (0-n-1) -> swap with element at position n-1
  //i=
	b.3) find largest element in array width (0-n-2) -> swap with element at position n-2	
	...
	b.n-1) find largest element in array width (0-1) -> swap with element at position 1


Q) Why last = arr.length -i -1;
	for element with length 3 i.e 3 elements -> index= 0 , 1 , 2
										  10  11  13
			here window will keep decreasing, last element in each window will be?
			iteration 1		arr.length - i - 1 =  last
						 		3   	  0   1 =  2

			iteration 2		arr.length - i - 1 =  last
						 		3   	  1   1 =  1
	

Code:

public class Main {
        public static void main(String args[]) {
            int[] arr = {3,1,5,4,2};
            selection(arr);
            System.out.println(Arrays.toString(arr));
        }
        static void selection(int[] arr) {
            for (int i=0; i< arr.length;i++) {
                int last = arr.length -i - 1;
                int maxIndex = getMaxIndex (arr, 0, last);
                swap(arr, maxIndex, last);
            }
        }
        static void swap (int[] arr, int first, int second) {
            int temp = arr[first];
            arr[first] = arr[second];
            arr[second] = temp;
        }

        private static int getMaxIndex(int[] arr, int start, int end) {
            int max = start;
            for(int i =start; i<= end; i++) {
                if(arr[max] < arr[i]) {
                    max = i;
                }
            }
            return max;
        }
    }


Q) What if we wrote below:
  private static int getMaxIndex(int[] arr, int start, int end) {
            int max = start;
            for(int i=start; i< end; i++) {
                if(arr[i] > arr[max]) {			//this part : evaluates arr[i] first and then evaluates arr[max] then compares
                    max = i;
                }
            }
            return max;
        }



Q) What if we wrote < instead of <= -> half sorted array -> wont consider last element in subarray
 private static int getMaxIndex(int[] arr, int start, int end) {
            int max = start;
            for(int i =start; i< end; i++) {
                if(arr[max] < arr[i]) {
                    max = i;
                }
            }
            return max;
        }


Q) Will it take negative no.? YES