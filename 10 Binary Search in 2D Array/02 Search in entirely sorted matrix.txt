1  2  3  4
5  6  7  8 
9  10 11 12
13 14 15 16


How to search target in this?


1) method 1 : Use 2 for loops
compare with first col elements
	if col element < target
		col++
	if col element < target
		col--

		-> search in final col

Summary: Just like binary search in 1d sorted array
		consider this binary search in 2d sorted array

2) How to minimize search space?
	2.a ) select anymiddle col 
		  binary search for an element in col , do until? only 2 rows remainin. why 2?
				condition1 : target < element 
					ignore the search space : all rows below, and elements to rigth in same row //why? all other no. to right 
																			and below are > element and >target

				condition2 : element < target
					ignore all rows above

	2.b) only 2 rows remaining
			4 subspaces to search
			
			if target < element &7 target > el	
	
code:
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[][] arr = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };
        System.out.println(Arrays.toString(search(arr, 9)));
    }

    // search in the row provided between the cols provided
    static int[] binarySearch(int[][] matrix, int row, int cStart, int cEnd, int target) {
        while (cStart <= cEnd) {
            int mid = cStart + (cEnd - cStart) / 2;
            if (matrix[row][mid] == target) {
                return new int[]{row, mid};
            }
            if (matrix[row][mid] < target) {
                cStart = mid + 1;
            } else {
                cEnd = mid - 1;
            }
        }
        return new int[]{-1, -1};
    }

    static int[] search(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length; // be cautious, matrix may be empty
        if (cols == 0) {
            return new int[]{-1, -1};
        }
        if (rows == 1) {
            return binarySearch(matrix, 0, 0, cols - 1, target);
        }

        int rStart = 0;
        int rEnd = rows - 1;
        int cMid = cols / 2;

        // run the loop till 2 rows are remaining
        while (rStart < (rEnd - 1)) { // while this is true it will have more than 2 rows
            int mid = rStart + (rEnd - rStart) / 2;
            if (matrix[mid][cMid] == target) {
                return new int[]{mid, cMid};
            }
            if (matrix[mid][cMid] < target) {
                rStart = mid;
            } else {
                rEnd = mid;
            }
        }

        // now we have two rows
        // check whether the target is in the col of 2 rows
        if (matrix[rStart][cMid] == target) {
            return new int[]{rStart, cMid};
        }
        if (matrix[rStart + 1][cMid] == target) {
            return new int[]{rStart + 1, cMid};
        }

        // search in 1st half
        if (target <= matrix[rStart][cMid - 1]) {
            return binarySearch(matrix, rStart, 0, cMid - 1, target);
        }
        // search in 2nd half
        if (target >= matrix[rStart][cMid + 1] && target <= matrix[rStart][cols - 1]) {
            return binarySearch(matrix, rStart, cMid + 1, cols - 1, target);
        }
        // search in 3rd half
        if (target <= matrix[rStart + 1][cMid - 1]) {
            return binarySearch(matrix, rStart + 1, 0, cMid - 1, target);
        }
        else  {
            return binarySearch(matrix, rStart + 1, cMid + 1, cols - 1, target);
        }
    }
}



//if (target >= matrix[rStart + 1][cMid + 1])
Q) What tc? comparisons = size of middle col = n rows -> log(n)
				    size of row 		 = m col  -> log(m)

	Total TC = O(log(m) + log(n)) = O(log(mn))

