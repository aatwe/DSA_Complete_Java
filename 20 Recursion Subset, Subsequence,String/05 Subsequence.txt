a) main


b) subseq
	b.1) base case: if up is empty -> print p -> return
	b.2) get first char from up
	b.3) recursive call to include:  	 subseq(p+ch, nextchar)
	b.4) recursive call to exlcude/ignore: subseq(p, next char)


import java.util.Arrays;
class main {
    public static void main(String[] args) {
        subseq("", "abc");
    }

    static void subseq(String p, String up) {
        if(up.isEmpty()) {
            System.out.println(p);
            return;
        }

        char ch = up.charAt(0);

        subseq(p + ch, up.substring(1));
        subseq(p     , up.substring(1));
    }

}
>All subsets found
abc
ab
ac
a
bc
b
c



Q) How to reverse print?
        subseq(p     , up.substring(1));
        subseq(p + ch, up.substring(1));


Q) Debug:
1) p = " "
   up = "abc"
//add c()

2) p = "a"
  up ="bc"
//add c()

3) p = "ab"
  up = "c"
// add c()

4) p = "abc"
  up = " "
//add c()

5) p = ab				//comes out of second last function call	
  up = c				//one function call popped out  //uses local p and up
				//advantage of putting things in argument
//skip c()

6) p = "ab"
  up = "" 
...


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Code:	//How to return arrayList of string
2 ways
	a) pass ArrayList in argument		//many ref single object	
						

	b) pass ArrayList in body of function
				//substring -> creates new object -> Strings are immutable
						up.substring() is not changing up //creates new

			//Base case: create new arrayList	//return the answer


 import java.util.Arrays;
import java.util.ArrayList;

    class main {
        public static void main(String[] args) {
            System.out.println(subseqRet("", "abc"));
        }

        static ArrayList<String> subseqRet(String p, String up) {
            if (up.isEmpty()) {
                ArrayList<String> list = new ArrayList<>();
                list.add(p);
                return list;
            }

            char ch = up.charAt(0);

            ArrayList<String> left = subseqRet(p + ch, up.substring(1));    //from below calls
            ArrayList<String> right = subseqRet(p, up.substring(1));

            left.addAll(right);                                    //add answers from below calls  //couldhave also added in right
            return left;                                        //return list
        }															
    }

