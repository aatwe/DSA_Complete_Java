How to bubble sort Linkedlist?
//these kind of problems are adhoc problems, just have to do what asked, not think much
//after every itereation :largest item comes to end

//case:1
f    s

5 -> 4 -> 3 -> 2 -> 1
1 -> 2 -> 3 -> 4 -> 5

a) 5> 4 -> flip...  // apply row and column recursion pattern

	how to flip?
		head = s
		f.next = s.next
		s.next = f


//case 2
	     p    f    s

5 -> 4 -> 3 -> 2 -> 1
1 -> 2 -> 3 -> 4 -> 5

b)
2 -> 1 flip
	
	How to fliP?
			prev.next = s;
			tail = f;
			f.next = null
			s.next = tail

//case 3


	     f    s		
4 -> 5 -> 3 -> 1 -> 5

	     f    s		
4 -> 5 -> 3 -> 1 -> 5
---------------------------------------------------------------
Pseudo Code:

a) create bubbleSort()

b) createbubbleSort(int row,int col)
	b.1) base case row  = 0
	b.2) col< row
		get first and second value
		if first> second
			swap
		else  if second == tail
			get current col -1
		else
			bubblesort(row.col+1)

----------------------------------------------------------------

Code 1:

public class Main {
    public static void main(String[] args) {
        LL first = new LL();
        LL second = new LL();

        int size;

        first.insertLast(1);
        first.insertLast(3);
        first.insertLast(5);
        first.insertLast(1);
        first.insertLast(2);
        first.insertLast(9);
        first.insertLast(14);

        LL ans = LL.merge(first,second);
        ans.display();

        LL list = new LL();
        for(int i=7; i>0; i--){
            list.insertLast(i);
        }
        list.display();
        list.bubbleSort();
        list.display();

    }
}


----------------------------------------------------------------

Code 2:

	public class LL {
    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }
    public void bubbleSort() {
        bubbleSort(size -1,0);
    }

    private void bubbleSort(int row, int col) {

        if(row == 0){return;}			//Check recursion pattern video	//bubblesort triangle pattern
        if(col< row){
            Node first = get(col);
            Node second = get(col+1);

            if(first.value > second.value){
                if(first == head){
                    head = second;
                    first.next = second.next;
                    second.next = first;
                } else if(second == tail) {
                    Node prev = get(col- 1);
                    prev.next = second;
                    tail = first;
                    first.next = null;
                    second.next = tail;
                } else {
                    Node prev = get(col- 1);
                    prev.next = second;
                    first.next = second.next;
                    second.next = first;
                }
            }
            bubbleSort(row, col+ 1);
        } else {
            bubbleSort(row-1,0);
        }
    }
    public static LL merge(LL first, LL second){

        Node f = first.head;
        Node s = second.head;

        LL ans = new LL();

        while(f != null && s != null) {
            if(f.value < s.value) {
                ans.insertLast(f.value);
                f = f.next;
            } else {
                ans.insertLast(s.value);
                s = s.next;
            }
        }

        while(f != null) {
            ans.insertLast(f.value);
            f = f.next;
        }

        while(s != null) {
            ans.insertLast(s.value);
            s = s.next;
        }

        return ans;
    }


    public void duplicates() {
        Node node = head;

        while(node.next != null) {
            if(node.value == node.next.value){
                node.next = node.next.next;
                size --;
            } else {
                node = node.next;
            }
        }
        tail = node;
        tail.next= null;

    }


    public void insertRec(int val, int index) {
        head = insertRec(val, index, head);
    }
    private Node insertRec(int val, int index, Node node) {
        if (index == 0) {
            Node temp = new Node(val, node);
            size++;
            return temp;
        }

        node.next = insertRec(val, index-1, node.next);
        return node;
    }

    public int deleteLast(){
        if(size<=1){
            return deleteFirst();
        }

        Node secondLast = get(size - 2);	//get the second last node
        int val = tail.value;
        tail = secondLast;
        tail.next = null;

        return val;

    }
    public Node get(int index) {
        Node node = head;

        for(int i = 0;i< index; i++){
            node = node.next;
        }
        return node; 		//returns reference pointer to that node
    }

    public int deleteFirst() {
        int val = head.value;	//get head value
        head = head.next;	//point head reference to next
        if(head == null){	//add corner case
            tail = null;		//if head null,make tail also null
        }
        size--;
        return val;

    }

    public void insert(int val, int index){
        if(index == 0){
            insertFirst(val);
            return;
        }
        if(index == size){
            insertLast(val);
            return;
        }
        Node temp = head;
        for(int i=1; i< index; i++) {
            temp = temp.next;
        }

        Node node = new Node(val, temp.next);	//before breaking link point new node
        temp.next = node;			//break the link
        size++;
    }
    public void insertLast(int val){
        if(tail == null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node;
        size++;
    }


    public void insertFirst(int val) {
        Node node = new Node(val);
        node.next = head;
        head = node;

        if (tail == null) {
            tail = head;
        }
        size += 1;
    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    private class Node {
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }

}


>Output:
1 -> 3 -> 5 -> 1 -> 2 -> 9 -> 14 -> END
7 -> 6 -> 5 -> 4 -> 3 -> 2 -> 1 -> END
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> END