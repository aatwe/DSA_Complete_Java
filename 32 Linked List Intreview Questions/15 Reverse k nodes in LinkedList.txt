Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list.
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.



Given: Linkedlist

Objective: Reverse every k groups

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
-----------------------------------------------------------------------------------------------------------

We know: how to reverse a sublinkedlist

Ex
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7

End goal:

3 -> 2 -> 1 -> 6 -> 5 -> 4 -> 7

a) 	
    prev curr next		 prev  curr next
	1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7

	how? for loop k times -> until curr !=  null


b) What after curr reaches end? Reverse 

c) What after reverse? connect 1 with 4



  newLast    prev  curr next
	1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7

			  |
	3 -> 2 -> 1 -> 6 -> 5 -> 4 -> 7	//newLast.next = current


d) What we were doing in reverse a linked list ii question (12)

	ListNode last   = prev;		// 
	ListNode newEnd = current;		//what is newEnd? newEnd of reverseList
-----------------------------------------------------------------------------------------------------------
Pseudo Code:


1) use reverseBetween()

2) Base check:
	if k<=1 or head is null
		return head

3) add reverseBetween() code inside while(1) after declaring current and prev
	 remove the for loop

	 run 2nd for loop k times instead of right - left + 1

	 add a while loop break condition
		if current == null -> break from while()
	
	 When loop ends? return head after while(1)

	make newEnd prev for the next part


-----------------------------------------------------------------------------------------------------------
Code:	//Note: below code is also reversing <k end items => modify it accordingly
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
		if(k <= 1 || head == null) {
			return head;
		}    
	
	ListNode current = head;
	ListNode prev = null;
	

	while(1){

	for(int i=0; current!= null && i< left - 1; i++) {
		prev= current;
		current = current.next;
	}
	ListNode last = prev;
	ListNode newEnd = current;
	

	ListNode next = current.next;

	for(int i=0; current!= null && i< k; i++) {
		current.next = prev;
		prev = current;
		current = next;
		
		if(next != null) {
			next = next.next;
		}	
	}

	//Reversing done

	if(last != null) {
		last.next = prev;
	} else {
		head = prev;
	}

	newEnd.next = current;

	if (current == null) {
		break;
	}

	prev = newEnd;

    }
  return head;	//leetcode asking for head 
}

}


What TC? O(N)
What SC? O(1)


------------------------------------------------------------------------------------------------------------

  public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left == right){
		return head;
	}

	ListNode current = head;
	ListNode prev = null;

	for(int i=0; current!= null && i< left - 1; i++) {
		prev= current;
		current = current.next;
	}
	ListNode last = prev;
	ListNode newEnd = current;
	

	ListNode next = current.next;

	for(int i=0; current!= null && i< right - left + 1; i++) {
		current.next = prev;
		prev = current;
		current = next;
		
		if(next != null) {
			next = next.next;
		}	
	}

	//Reversing done

	if(last != null) {
		last.next = prev;
	} else {
		head = prev;
	}

	newEnd.next = current;
	return head;	//leetcode asking for head
    }