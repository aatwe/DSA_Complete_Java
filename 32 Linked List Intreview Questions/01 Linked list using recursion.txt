what we know linkedlist: basics

Important:

1) 2 pointer : Fast and slow pointer method

2) reversal of LL inplace
	using recursion + itertaion

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
a) How to insert in linked list using recursion


When useful?
	a) when not given size of LL
	b) when not given tail of LL
	

1) Given? head Obejctive: insert 7 at index 3 using recursion

2) initial:  3 -> 5 -> 9 -> 1 -> null
   final  :  3 -> 5 -> 9 -> 7 -> 1 -> null

 

3) What recursive function?
	a) void return type + make changes in LL

	b) node return type that returns list node to change structure 



4) to insert at index 3, we need index2,index4,and to be added index3 node


6) head 			   (0,val,9)
	3 -> 5 -> 9 -> 1 -> null

goal = 7  @ index 3

(how far from index, val)

  (3,val)   (2,val)  (1,val)   (0,val) 
	3   ->   5   ->   9   ->   7   ->   1   ->   null

7)  How will we pass values? pass parameters in arguments
		parameters for a particular function call: inside body
		parameters that we want to pass	        : arguments

	What will we pass? 
	  a) 9. What is 9? after which 7 is to be added
	  b) pass the current node 1
	  		How to pass current node?	 (0,val,1)	
	
	  c) why we passed 1 in recursive function call?
			new node.next -> whatever in current function call (7.next -> 1)		..added in base condition
			return added node

	  d) What after we come out of function call? need to connect 9 --> 7
		node.next = what added in base condition
		return node itself	 


		(0, val,9)		

		....
		return head

		
8) What after index becomes 0 in recursive calls ? reached 1
		a) Create a new node  7

		b) increase the size

		c) 7.next




9) Conclusion logic
	if new node added in function call -> return added node

	if new node not added in functionc call -> return current node
									return where? where called
									 where called?


Pseudo code:

a) Create function insertRec
b) Create insertRec of type Node (val,index,node)		//why private , dont want person to see
	base condition: if index =0 -> can add node		//Add node base condition
		the new node: value will be val, next = current node
	increment size
	return this node
	
c) if not 0 -> keep moving forward
	When moving from one node to another (for ex 5 to 9)
		
		(2,val,5)		(1,val,9)
			   5 --> 9
		//we are adding 5.next in function call
		(2,val,5) 		(1,val,5.next)

		hence insertRec(val, index--, node.next);
			//this will return node type
	Why node.next = above? returned value = current node.next	//if new node added that is returned
	return current node


----------------------------------------------
public void insertRec(int val, int index) {\
	head = insertRec(val,index, head);

}

private  Node insertRec(int val, int index, Node node) {
	if (index == 0) {
		Node temp = new Node(val, node);
		size++;
		return temp;
	}

	node.next = insertRec(val, index--,)
	return node;
}



----------------------------------------------
Code: 1
 public class Main {
        public static void main(String[] args) {
            LL list = new LL();
 		 list.insert(23);
        	 list.insert(3);
        	 list.insert(19);
        	 list.insert(75);
        	 list.display();
		 list.insertRec(88,2);
		 list.display();	

        }
    }


Code: 2 

public class LL {
    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }
    public void insertRec(int val, int index) {
        head = insertRec(val, index, head);
    }
    private Node insertRec(int val, int index, Node node) {
        if (index == 0) {
            Node temp = new Node(val, node);
            size++;
            return temp;
        }

        node.next = insertRec(val, index-1, node.next);
        return node;
    }

    public int deleteLast(){
        if(size<=1){
            return deleteFirst();
        }

        Node secondLast = get(size - 2);	//get the second last node
        int val = tail.value;
        tail = secondLast;
        tail.next = null;

        return val;

    }
    public Node get(int index) {
        Node node = head;

        for(int i = 0;i< index; i++){
            node = node.next;
        }
        return node; 		//returns reference pointer to that node
    }

    public int deleteFirst() {
        int val = head.value;	//get head value
        head = head.next;	//point head reference to next
        if(head == null){	//add corner case
            tail = null;		//if head null,make tail also null
        }
        size--;
        return val;

    }

    public void insert(int val, int index){
        if(index == 0){
            insertFirst(val);
            return;
        }
        if(index == size){
            insertLast(val);
            return;
        }
        Node temp = head;
        for(int i=1; i< index; i++) {
            temp = temp.next;
        }

        Node node = new Node(val, temp.next);	//before breaking link point new node
        temp.next = node;			//break the link
        size++;
    }
    public void insertLast(int val){
        if(tail == null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node;
        size++;
    }


    public void insertFirst(int val) {
        Node node = new Node(val);
        node.next = head;
        head = node;

        if (tail == null) {
            tail = head;
        }
        size += 1;
    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    private class Node {
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }

}

>Output:	

23 -> 3 -> 19 -> 75 -> END
23 -> 3 -> 88 -> 19 -> 75 -> END
