Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.


How to find middle of linked list?
	a) find length of linked list	

	c) move till half 

Given: do in 1 single pass

	a) start 2 people from first head
	b) at any time: distance travel by fast pointer = 2x(distance by slow)
	
	c) when fast finishes , slow reaches mid

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Pseudo Code:

a) start slow and fast from head
b) until fast doesnt reach end or fast.next !== null

c) move slow once
   move fast twice

d) return final answer as middle as slow's position
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        	ListNode s = head;
	        ListNode f = head;

	while(f!= null && f.next!=null) {
		    s = s.next;
		    f = f.next.next;
	    }        
	return s;
    }
  }
