Objective: Reverse a Linked List Iteratively

head
5  ->	 4  ->  3  ->  2  ->  1 -> null 

What given? only head

What output:

null <- 5  <- 4  <-  3  <-  2  <-  1





1) How to iteratively reverse? solve while moving forward		//recursion we solved while moving back

2) How to reverse when moving forward? 3 pointers 
		
		prev, present, next
	initially:
		prev : null
		present : head
		next : head.next

	What observations from  output?		//just see what to be done and do it  // no thinking 
	a) present.next = prev
	b) prev = present
	c) present = next
	d) next = next.next		//check for null pointer exception


3) until not reach end of LL (i.e while present != null)  

4) What after reaching end of LL

	when preesnt = null
	prev = last element 

	i.e head = prev

What state
						 prev present

null <- 5  ->  4  ->  3  ->  2  ->  1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Pseudo Code:

a) Create reverse()

b) check if size < 2 -> return

c) initialize 	Node prev = null;
			Node present = head;
			Node next = present.next;


d) de below while present not reaches null
		make present.next -> prev 
		prev = present;
		present = next;

	
e) check : as long as next not equal to null
	move next ahead

f) make the new head as prev


What TC? O(N)
What SC? O(1) no extra space


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Leetcode:

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {		//Make Node -> ListNode
	
	if(head == null){
                return head;
      }
	
	ListNode prev = null;
	ListNode present = head;
	ListNode next = present.next;

	while(present != null) {
		present.next = prev;
		prev = present;
		present = next;
		
		if(next != null) {
			next = next.next;
		}

	}
	return prev;					//return prev instead of head = prev;


    }
}







+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Java


Code 2:

	public class LL {
    private Node head;
    private Node tail;
    private int size;

    public LL() {
        this.size = 0;
    }

    private void reverse(Node node) {
	if(node == tail) {
		head = tail;
		return;
	}

	reverse(node.next);.

	tail.next = node;
	tail = node;
	tail.next = null;


	}

    public void bubbleSort() {
        bubbleSort(size -1,0);
    }
//-----------------------------------------------------------------------------------------------------------

 private void reverse() {
	if(size < 2) {
		return;
	}

	Node prev = null;
	Node present = head;
	Node next = present.next;

	while(present != null) {
		present.next = prev;
		prev = present;
		present = next;
		
		if(next != null) {
			next = next.next;
		}

	}
	head = prev;

}






    private void bubbleSort(int row, int col) {

        if(row == 0){return;}			//Check recursion pattern video	//bubblesort triangle pattern
        if(col< row){
            Node first = get(col);
            Node second = get(col+1);

            if(first.value > second.value){
                if(first == head){
                    head = second;
                    first.next = second.next;
                    second.next = first;
                } else if(second == tail) {
                    Node prev = get(col- 1);
                    prev.next = second;
                    tail = first;
                    first.next = null;
                    second.next = tail;
                } else {
                    Node prev = get(col- 1);
                    prev.next = second;
                    first.next = second.next;
                    second.next = first;
                }
            }
            bubbleSort(row, col+ 1);
        } else {
            bubbleSort(row-1,0);
        }
    }
    public static LL merge(LL first, LL second){

        Node f = first.head;
        Node s = second.head;

        LL ans = new LL();

        while(f != null && s != null) {
            if(f.value < s.value) {
                ans.insertLast(f.value);
                f = f.next;
            } else {
                ans.insertLast(s.value);
                s = s.next;
            }
        }

        while(f != null) {
            ans.insertLast(f.value);
            f = f.next;
        }

        while(s != null) {
            ans.insertLast(s.value);
            s = s.next;
        }

        return ans;
    }


    public void duplicates() {
        Node node = head;

        while(node.next != null) {
            if(node.value == node.next.value){
                node.next = node.next.next;
                size --;
            } else {
                node = node.next;
            }
        }
        tail = node;
        tail.next= null;

    }


    public void insertRec(int val, int index) {
        head = insertRec(val, index, head);
    }
    private Node insertRec(int val, int index, Node node) {
        if (index == 0) {
            Node temp = new Node(val, node);
            size++;
            return temp;
        }

        node.next = insertRec(val, index-1, node.next);
        return node;
    }

    public int deleteLast(){
        if(size<=1){
            return deleteFirst();
        }

        Node secondLast = get(size - 2);	//get the second last node
        int val = tail.value;
        tail = secondLast;
        tail.next = null;

        return val;

    }
    public Node get(int index) {
        Node node = head;

        for(int i = 0;i< index; i++){
            node = node.next;
        }
        return node; 		//returns reference pointer to that node
    }

    public int deleteFirst() {
        int val = head.value;	//get head value
        head = head.next;	//point head reference to next
        if(head == null){	//add corner case
            tail = null;		//if head null,make tail also null
        }
        size--;
        return val;

    }

    public void insert(int val, int index){
        if(index == 0){
            insertFirst(val);
            return;
        }
        if(index == size){
            insertLast(val);
            return;
        }
        Node temp = head;
        for(int i=1; i< index; i++) {
            temp = temp.next;
        }

        Node node = new Node(val, temp.next);	//before breaking link point new node
        temp.next = node;			//break the link
        size++;
    }
    public void insertLast(int val){
        if(tail == null){
            insertFirst(val);
            return;
        }
        Node node = new Node(val);
        tail.next = node;
        tail = node;
        size++;
    }


    public void insertFirst(int val) {
        Node node = new Node(val);
        node.next = head;
        head = node;

        if (tail == null) {
            tail = head;
        }
        size += 1;
    }

    public void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

    private class Node {
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }

}

